{"version":3,"sources":["service/firebase.js","context/ChatContext.jsx","hooks/useResolved.js","components/App/App.jsx","hooks/useAuth.js","components/Chat/Chat.jsx","components/Login/formikConfig.js","components/Login/Login.jsx","components/Signup/formikConfig.js","components/Signup/Signup.jsx","helpers/notMe.js","helpers/joinUsernames.js","helpers/groupMessages.js","components/ChatList/ChatList.jsx","components/RailHeader/RailHeader.jsx","components/LeftRail/LeftRail.jsx","components/ChatInput/ChatInput.jsx","components/ChatAvatar/ChatAvatar.jsx","components/SearchUsers/SearchUsers.jsx","hooks/useDebounce.js","components/FormField/FormField.jsx","components/ImageUpload/ImageUpload.jsx","components/ChatToolbar/ChatToolbar.jsx","components/MessageList/MessageList.jsx","hooks/useScrollToBottom.js","index.js"],"names":["firebase","initializeApp","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","error","test","message","console","stack","fb","auth","storage","firestore","ChatContext","createContext","ChatProvider","children","authUser","useState","myChats","setMyChats","chatConfig","setChatConfig","selectedChat","setSelectedChat","useEffect","collection","doc","uid","onSnapshot","snap","userSecret","avatar","data","userName","projectID","Provider","value","selectChatClick","chat","getMessages","id","messages","deleteChatClick","admin","username","window","confirm","deleteChat","leaveChat","createChatClick","newChat","title","useChat","useContext","useResolved","vals","resolved","setResolved","every","v","undefined","App","history","useHistory","setAuthUser","onAuthStateChanged","user","useAuth","authResolved","push","className","path","exact","component","Chat","Login","Signup","log","hideUI","onConnect","getChats","onNewChat","sort","a","b","onDeleteChat","filter","c","onNewMessage","chatId","chatThatMessageBelongsTo","find","filteredChats","updatedChat","last_message","src","alt","defaultValues","email","password","validationSchema","Yup","shape","required","serverError","setServerError","onSubmit","setSubmitting","signInWithEmailAndPassword","then","res","catch","err","code","finally","validateOnMount","initialValues","isValid","isSubmitting","name","label","type","onClick","disabled","verifyPassword","min","oneOf","matches","createUserWithEmailAndPassword","fetch","method","headers","body","JSON","stringify","userId","set","notMe","people","p","person","joinUsernames","currentUsername","map","un","join","groupMessages","finalArr","currentArr","currentAuthor","forEach","m","sender","splice","length","ChatList","index","Icon","circular","inverted","color","attachments","text","slice","RailHeader","configResolved","inputRef","useRef","image","setImage","ref","accept","onChange","e","file","target","files","onFileAttach","crop","header","mode","croppedImage","uploadRef","child","put","getDownloadURL","url","update","close","signOut","IconGroup","input","current","click","size","Image","toUpperCase","corner","Loader","active","LeftRail","chatsResolved","ChatInput","chatInputText","setChatInputText","imageModalOpen","setImageModalOpen","sendChatMessage","sendMessage","placeholder","onKeyPress","key","ChatAvatar","setAvatar","where","get","docs","SearchUsers","visible","closeFn","searchRef","loading","setLoading","searchTerm","setSearchTerm","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searchResults","setSearchResults","focus","getOtherPeople","userNames","Object","keys","u","toLowerCase","includes","style","display","Search","fluid","onBlur","results","open","r","onSearchChange","onResultSelect","result","addPerson","updateChat","FormField","ImageUpload","imageSrc","setImageSrc","cropRef","fr","FileReader","onload","readAsDataURL","Modal","dimmer","Header","Content","width","height","border","Actions","canvas","getImageScaledToCanvas","toDataURL","blob","ChatToolbar","searching","setSearching","cloaeFn","MessageList","trigger","Promise","all","Array","from","document","images","img","complete","resolve","onerror","getElementsByClassName","scrollTop","scrollHeight","individualMessage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2c785135.chunk.js","sourcesContent":["import firebase from 'firebase/app'; // <-- This must be first\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\ntry {\r\n  firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  });\r\n} catch (error) {\r\n  if (!/already exists/u.test(error.message)) {\r\n    console.error('Firebase admin initialization error', error.stack);\r\n  }\r\n}\r\n\r\nexport const fb = {\r\n  auth: firebase.auth(),\r\n  storage: firebase.storage(),\r\n  firestore: firebase.firestore(),\r\n};","import { fb } from 'service';\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\nimport { newChat, leaveChat, deleteChat, getMessages } from 'react-chat-engine';\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatProvider = ({ children, authUser }) => {\r\n  const [myChats, setMyChats] = useState();\r\n  const [chatConfig, setChatConfig] = useState();\r\n  const [selectedChat, setSelectedChat] = useState();\r\n\r\n  const createChatClick = () => {\r\n    newChat(chatConfig, { title: '' });\r\n  };\r\n  const deleteChatClick = chat => {\r\n    const isAdmin = chat.admin.username === chatConfig.userName;\r\n\r\n    if (\r\n      isAdmin &&\r\n      window.confirm('Are you sure you want to delete this chat?')\r\n    ) {\r\n      deleteChat(chatConfig, chat.id);\r\n    } else if (window.confirm('Are you sure you want to leave this chat?')) {\r\n      leaveChat(chatConfig, chat.id, chatConfig.userName);\r\n    }\r\n  };\r\n  const selectChatClick = chat => {\r\n    getMessages(chatConfig, chat.id, messages => {\r\n      setSelectedChat({\r\n        ...chat,\r\n        messages,\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (authUser) {\r\n      fb.firestore\r\n        .collection('chatUsers')\r\n        .doc(authUser.uid)\r\n        .onSnapshot(snap => {\r\n          setChatConfig({\r\n            userSecret: authUser.uid,\r\n            avatar: snap.data().avatar,\r\n            userName: snap.data().userName,\r\n            projectID: '138ca56a-12fd-4b6b-9ed7-31a28d529351',\r\n          });\r\n        });\r\n    }\r\n  }, [authUser, setChatConfig]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        myChats,\r\n        setMyChats,\r\n        chatConfig,\r\n        selectedChat,\r\n        setChatConfig,\r\n        setSelectedChat,\r\n        selectChatClick,\r\n        deleteChatClick,\r\n        createChatClick,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setChatConfig,\r\n    setSelectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n    createChatClick,\r\n  } = useContext(ChatContext);\r\n\r\n  return {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setChatConfig,\r\n    setSelectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n    createChatClick,\r\n  };\r\n};","import { useState, useEffect } from \"react\";\r\n\r\nexport const useResolved = (\r\n    ...vals\r\n) => {\r\n    const [resolved, setResolved] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setResolved(vals.every(v => v !== undefined));\r\n    }, [vals]);\r\n\r\n    return resolved;\r\n}","import { useEffect } from 'react';\r\nimport { ChatProvider } from 'context';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { useAuth, useResolved } from 'hooks';\r\nimport { Login, Signup, Chat } from 'components';\r\nimport { Switch, Route, useHistory } from 'react-router-dom';\r\n\r\nexport const App = () => {\r\n  const history = useHistory();\r\n  const { authUser } = useAuth();\r\n  const authResolved = useResolved(authUser);\r\n\r\n  useEffect(() => {\r\n    if (authResolved) {\r\n      history.push(!!authUser ? '/' : '/login');\r\n    }\r\n  }, [authResolved, authUser, history]);\r\n\r\n  return authResolved ? (\r\n    <ChatProvider authUser={authUser}>\r\n      <div className=\"app\">\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Chat} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n        </Switch>\r\n      </div>\r\n    </ChatProvider>\r\n  ) : (\r\n    <>Loading...</>\r\n  );\r\n};","import { fb } from 'service';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useAuth = () => {\r\n    const [authUser, setAuthUser] = useState();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = fb.auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                setAuthUser(user);\r\n            } else {\r\n                setAuthUser(null);\r\n            }\r\n        });\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    return {\r\n        authUser,\r\n    };\r\n};","import { useEffect } from 'react';\r\nimport { useChat } from 'context';\r\nimport { getChats, ChatEngine } from 'react-chat-engine';\r\nimport { LeftRail, ChatToolbar, ChatInput, MessageList } from 'components';\r\n\r\nexport const Chat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    console.log('My Chats: ', myChats);\r\n  }, [myChats]);\r\n\r\n  useEffect(() => {\r\n    console.log('Selected Chat: ', selectedChat);\r\n  }, [selectedChat]);\r\n\r\n  return (\r\n    <>\r\n      {!!chatConfig && (\r\n        <ChatEngine\r\n          hideUI={true}\r\n          userName={chatConfig.userName}\r\n          projectID={chatConfig.projectID}\r\n          userSecret={chatConfig.userSecret}\r\n          onConnect={() => {\r\n            getChats(chatConfig, setMyChats);\r\n          }}\r\n          onNewChat={chat => {\r\n            if (chat.admin.username === chatConfig.userName) {\r\n              selectChatClick(chat);\r\n            }\r\n            setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\r\n          }}\r\n          onDeleteChat={chat => {\r\n            if (selectedChat?.id === chat.id) {\r\n              setSelectedChat(null);\r\n            }\r\n            setMyChats(\r\n              myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n          onNewMessage={(chatId, message) => {\r\n            if (selectedChat && chatId === selectedChat.id) {\r\n              setSelectedChat({\r\n                ...selectedChat,\r\n                messages: [...selectedChat.messages, message],\r\n              });\r\n            }\r\n            const chatThatMessageBelongsTo = myChats.find(c => c.id === chatId);\r\n            const filteredChats = myChats.filter(c => c.id !== chatId);\r\n            const updatedChat = {\r\n              ...chatThatMessageBelongsTo,\r\n              last_message: message,\r\n            };\r\n            setMyChats(\r\n              [updatedChat, ...filteredChats].sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <div className=\"chat-container\">\r\n        <LeftRail />\r\n        <div className=\"current-chat\">\r\n          {selectedChat ? (\r\n            <div className=\"chat\">\r\n              <ChatToolbar />\r\n              <MessageList />\r\n              <ChatInput />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-chat-selected\">\r\n              <img\r\n                src=\"/img/pointLeft.png\"\r\n                className=\"point-left\"\r\n                alt=\"point-left\"\r\n              />\r\n              Select A Chat\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import * as Yup from 'yup';\r\n\r\nexport const defaultValues = {\r\n    email: '',\r\n    password: '',\r\n};\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n    email: Yup.string().required('Required'),\r\n    password: Yup.string().required('Required'),\r\n});","import { fb } from \"service\";\r\nimport { useState } from \"react\";\r\nimport { FormField } from \"components\";\r\nimport { Formik, Form } from \"formik\"\r\nimport { useHistory } from \"react-router\";\r\nimport { defaultValues, validationSchema  } from \"./formikConfig\";\r\n\r\nexport const Login = () => {\r\n    const history = useHistory();\r\n    const [serverError, setServerError] = useState('');\r\n\r\n    const login = ({ email, password }, { setSubmitting }) => {\r\n        fb.auth\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(res => {\r\n            if (!res.user) {\r\n                setServerError(\"We're having trouble loggin you in. Please try again\");\r\n            }\r\n        })\r\n        .catch(err => {\r\n        if (err.code === 'auth/wrong-password') {\r\n          setServerError('Invalid credentials');\r\n        } else if (err.code === 'auth/user-not-found') {\r\n          setServerError('No account for this email');\r\n        } else {\r\n          setServerError('Something went wrong :(');\r\n        }\r\n      })\r\n      .finally(() => setSubmitting(false));\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-form\">\r\n           <h1>Login</h1>\r\n\r\n           <Formik \r\n              onSubmit={login}\r\n              validateOnMount={true}\r\n              initialValues={defaultValues}\r\n              validationSchema={validationSchema}\r\n           >\r\n            {({ isValid, isSubmitting}) => (\r\n                <Form>\r\n                    <FormField name='email' label='Email' type='email' />\r\n                    <FormField name='password' label='Password' type='password' />\r\n\r\n                    <div className=\"auth-link-container\">\r\n                        Don't have an account?{' '}\r\n                        <span \r\n                          className=\"auth-link\"\r\n                          onClick={() => history.push('signup')}\r\n                        >\r\n                            Sign Up!\r\n                        </span>\r\n                    </div>\r\n                    <button type=\"submit\" disabled={!isValid || isSubmitting}>\r\n                        Login\r\n                    </button>\r\n                </Form>\r\n            )}\r\n           </Formik>\r\n           {!!serverError && <div className=\"error\">{serverError}</div>}\r\n        </div>\r\n    )\r\n}","import * as Yup from 'yup';\r\n\r\nexport const defaultValues ={\r\n    email: '',\r\n    password: '',\r\n    userName: '',\r\n    verifyPassword: '',\r\n};\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n     email: Yup.string().email('Invalid email address').required('Required'),\r\n     password: Yup.string().required('Required').min(8, 'Must be at least 8 characters'),\r\n     verifyPassword: Yup.string().required('Required').oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n     userName: Yup.string().required('Required').matches(/^\\S*$/, 'No spaces').min(3, 'Must be at least 3 characters'),\r\n});","import { fb } from \"service\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useHistory  } from \"react-router-dom\";\r\nimport { defaultValues, validationSchema } from \"./formikConfig\";\r\nimport { FormField } from \"components\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Signup = () => {\r\n    const history = useHistory();\r\n    const [serverError, setServerError] = useState(' ');\r\n\r\n    const signup = ({ email, userName, password }, { setSubmitting }) => {\r\n        fb.auth\r\n          .createUserWithEmailAndPassword(email, password)\r\n          .then(res => {\r\n            if (res?.user?.uid) {\r\n                fetch('/api/createUser', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        userId: res.user.uid,\r\n                    }),\r\n                })\r\n                .then(() => {\r\n                     fb.firestore\r\n                       .collection('chatUsers')\r\n                       .doc(res.user.uid)\r\n                       .set({ userName, avatar: '' });\r\n                })\r\n            } else {\r\n                setServerError(\r\n                    \"We're having trouble signing you up. Please try again.\",\r\n                );\r\n            }\r\n          })\r\n          .catch(err => {\r\n        if (err.code === 'auth/email-already-in-use') {\r\n          setServerError('An account with this email already exists');\r\n        } else {\r\n          setServerError(\r\n            \"We're having trouble signing you up. Please try again.\",\r\n          );\r\n        }\r\n      })\r\n      .finally(() => setSubmitting(false));\r\n    };\r\n\r\n    return (\r\n        <div className='auth-form'>\r\n           <h1>Signup</h1>\r\n           <Formik\r\n              onSubmit={signup}\r\n              validateOnMount={true}\r\n              initialValues={defaultValues}\r\n              validationSchema={validationSchema}\r\n           >\r\n               {({ isValid, isSubmitting }) => (\r\n                   <Form>\r\n                      <FormField name='userName' label='User Name' />\r\n                      <FormField name='email' label='Email' type='email' />\r\n                      <FormField name='password' label='Password' type='password' />\r\n                      <FormField name='verifyPassword' label='Verify Password' type='password' />\r\n\r\n                      <div className='auth-link-container'>\r\n                          Already have an account?{' '}\r\n                          <span className=\"auth-link\" onClick={() => history.push('login')}>\r\n                              Log In!\r\n                          </span>\r\n                      </div>\r\n\r\n                      <button disabled={isSubmitting || !isValid} type='submit'>\r\n                          Sign Up\r\n                      </button>\r\n                   </Form>\r\n               )}\r\n           </Formik>\r\n\r\n           {!!serverError && <div className=\"error\">{serverError}</div>}\r\n        </div>\r\n    )\r\n}","export const notMe = (chatConfig, selectedChat) =>{\r\n    return selectedChat.people.find(p => p.person.username !== chatConfig.userName)?.person?.username;\r\n};","export const joinUsernames = (people, currentUsername) => {\r\n  return '@' + people\r\n    .map(p => p.person.username)\r\n    .filter(un => un !== currentUsername)\r\n    .join(', @');\r\n};","export const groupMessages = messages => {\r\n  const finalArr = [];\r\n\r\n  let currentArr = [];\r\n  let currentAuthor = '';\r\n  messages.forEach(m => {\r\n    \r\n    if (m.sender.username !== currentAuthor) {\r\n      if (currentAuthor) {\r\n        finalArr.push([...currentArr]);\r\n      }\r\n      currentArr.splice(0, currentArr.length); // empty the array\r\n      currentArr.push(m);\r\n      currentAuthor = m.sender.username;\r\n    } else {\r\n      currentArr.push(m);\r\n    }\r\n  });\r\n\r\n\r\n  finalArr.push([...currentArr]);\r\n\r\n  return finalArr;\r\n};","import React from 'react';\r\nimport { useChat } from 'context';\r\nimport { ChatAvatar } from 'components';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { joinUsernames, notMe } from 'helpers';\r\n\r\nexport const ChatList = () => {\r\n  const {\r\n    myChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n  } = useChat();\r\n\r\n  return (\r\n    <div className=\"chat-list\">\r\n      {myChats.map((c, index) => (\r\n        <div\r\n          className={`chat-list-item ${\r\n            selectedChat?.id === c.id ? 'selected-chat-item' : ''\r\n          }`}\r\n          key={index}\r\n        >\r\n          <div\r\n            onClick={() => selectChatClick(c)}\r\n            className=\"chat-list-item-content\"\r\n          >\r\n            {c.people.length === 1 ? (\r\n              <>\r\n                <Icon circular inverted color=\"red\" name=\"user cancel\" />\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">No One Added Yet</div>\r\n                </div>\r\n              </>\r\n            ) : c.people.length === 2 ? (\r\n              <>\r\n                <ChatAvatar username={notMe(chatConfig, c)} chat={c} />\r\n\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">{notMe(chatConfig, c)}</div>\r\n                  <div className=\"preview-message\">\r\n                    {c.last_message.attachments.length\r\n                      ? `${c.last_message.sender.username} sent an attachment`\r\n                      : c.last_message.text.slice(0, 50) + '...'}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Icon circular inverted color=\"blue\" name=\"users\" />\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">\r\n                    {joinUsernames(c.people, chatConfig.userName).slice(0, 50) + '...'}\r\n                  </div>\r\n                  <div className=\"preview-message\">\r\n                    {c.last_message.attachments.length\r\n                      ? `${c.last_message.sender.username} sent an attachment`\r\n                      : c.last_message.text.slice(0, 50) + '...'}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <div onClick={() => deleteChatClick(c)} className=\"chat-item-delete\">\r\n            <Icon name=\"delete\" />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};","import { fb } from 'service';\r\nimport { useChat } from 'context';\r\nimport { useResolved } from 'hooks';\r\nimport { useRef, useState } from 'react';\r\nimport { ImageUpload } from 'components';\r\nimport { Icon, IconGroup, Image, Loader } from 'semantic-ui-react';\r\n\r\nexport const RailHeader = () => {\r\n  const { chatConfig } = useChat();\r\n  const configResolved = useResolved(chatConfig);\r\n  const inputRef = useRef(null);\r\n  const [image, setImage] = useState();\r\n\r\n  const onFileAttach = file => {\r\n    setImage(file);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        className=\"file-input\"\r\n        accept=\"image/jpeg,image/png\"\r\n        onChange={e => {\r\n          const file = e.target?.files?.[0];\r\n          if (file) {\r\n            onFileAttach(file);\r\n          }\r\n        }}\r\n      />\r\n\r\n      {!!image && (\r\n        <ImageUpload\r\n          crop\r\n          file={image}\r\n          header=\"Set Your Avatar\"\r\n          mode=\"message\"\r\n          onSubmit={croppedImage => {\r\n            const storageRef = fb.storage.ref();\r\n            const uploadRef = storageRef.child(\r\n              `${chatConfig.userSecret}_avatar.jpg`,\r\n            );\r\n            uploadRef.put(croppedImage).then(() => {\r\n              uploadRef.getDownloadURL().then(url => {\r\n                fb.firestore\r\n                  .collection('chatUsers')\r\n                  .doc(chatConfig.userSecret)\r\n                  .update({ avatar: url })\r\n                  .then(() => {\r\n                    setImage(null);\r\n                  });\r\n              });\r\n            });\r\n          }}\r\n          close={() => setImage(null)}\r\n        />\r\n      )}\r\n\r\n      <div className=\"left-rail-header\">\r\n        <Icon\r\n          onClick={() => fb.auth.signOut()}\r\n          className=\"sign-out\"\r\n          name=\"sign out\"\r\n        />\r\n        {configResolved && !!chatConfig ? (\r\n          <div className=\"current-user-info\">\r\n            <IconGroup\r\n              onClick={() => {\r\n                const input = inputRef.current;\r\n                if (input) {\r\n                  input.value = '';\r\n                  input.click();\r\n                }\r\n              }}\r\n              className=\"user-avatar\"\r\n              size=\"large\"\r\n            >\r\n              {chatConfig.avatar ? (\r\n                <Image src={chatConfig.avatar} avatar />\r\n              ) : (\r\n                <div className=\"empty-avatar\">\r\n                  {chatConfig.userName[0].toUpperCase()}\r\n                </div>\r\n              )}\r\n\r\n              <Icon corner name=\"camera\" inverted circular />\r\n            </IconGroup>\r\n\r\n            <div className=\"current-username\">{chatConfig.userName}</div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"user-loading\">\r\n            <Loader active size=\"small\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport { useChat } from 'context';\r\nimport { useResolved } from 'hooks';\r\nimport { ChatList } from 'components';\r\nimport { Loader } from 'semantic-ui-react';\r\nimport { RailHeader } from 'components/RailHeader/RailHeader';\r\n\r\nexport const LeftRail = () => {\r\n  const { myChats, createChatClick } = useChat();\r\n  const chatsResolved = useResolved(myChats);\r\n\r\n  return (\r\n    <div className=\"left-rail\">\r\n      <RailHeader/>\r\n      {chatsResolved ? (\r\n        <>\r\n          {!!myChats.length ? (\r\n            <div className=\"chat-list-container\">\r\n              <ChatList />\r\n            </div>\r\n          ) : (\r\n            <div className=\"chat-list-container no-chats-yet\">\r\n              <h3>No Chats Yet</h3>\r\n            </div>\r\n          )}\r\n          <button className=\"create-chat-button\" onClick={createChatClick}>\r\n            Create Chat\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <div className=\"chats-loading\">\r\n          <Loader active size=\"huge\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React, { useRef, useState } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { useChat } from 'context/ChatContext';\r\nimport { sendMessage } from 'react-chat-engine';\r\nimport { ImageUpload } from 'components';\r\n\r\nexport const ChatInput = () => {\r\n  const { chatConfig, selectedChat } = useChat();\r\n  const [chatInputText, setChatInputText] = useState('');\r\n  const [imageModalOpen, setImageModalOpen] = useState(false);\r\n\r\n  const inputRef = useRef(null);\r\n  const  [image, setImage] = useState();\r\n\r\n  const onFileAttach = file => {\r\n    setImage(file);\r\n    setImageModalOpen(true)\r\n  }\r\n\r\n  const sendChatMessage = () => {\r\n    if (selectedChat && chatInputText) {\r\n      setChatInputText('');\r\n      sendMessage(chatConfig, selectedChat.id, {\r\n        text: chatInputText,\r\n        files: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-controls\">\r\n        <div\r\n          onClick={() => {\r\n            const input = inputRef.current;\r\n            if (input) {\r\n              input.value = '';\r\n              input.click();\r\n            }\r\n          }}\r\n          className=\"attachment-icon\"\r\n        >\r\n          <Icon name=\"attach\" color=\"white\" />\r\n        </div>\r\n        <input\r\n          value={chatInputText}\r\n          className=\"chat-input\"\r\n          placeholder=\"Send a message\"\r\n          onKeyPress={e => {\r\n            if (e.key === 'Enter') {\r\n              sendChatMessage();\r\n            }\r\n          }}\r\n          onChange={e => setChatInputText(e.target.value)}\r\n        />\r\n        <div onClick={sendChatMessage} className=\"send-message-icon\">\r\n          <Icon name=\"send\" color=\"grey\" />\r\n        </div>\r\n      </div>\r\n\r\n       <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        className=\"file-input\"\r\n        accept=\"image/jpeg,image/png\"\r\n        onChange={e => {\r\n          const file = e.target?.files?.[0];\r\n          if (file) {\r\n            onFileAttach(file);\r\n          }\r\n        }}\r\n      />\r\n\r\n      {!!imageModalOpen && !!image && (\r\n        <ImageUpload \r\n            file={image}\r\n            onSubmit={() => {\r\n              sendMessage(chatConfig, selectedChat.id, { text: chatInputText, files: [image] }, () => {\r\n                setImage(null);\r\n                setChatInputText('');\r\n              })\r\n            }}\r\n            close={() => setImageModalOpen(false)}\r\n        />\r\n      )} \r\n    </>\r\n  );\r\n};","import { fb } from 'service';\r\nimport { useChat } from 'context';\r\nimport { Image } from 'semantic-ui-react';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport const ChatAvatar = ({ chat, username, className }) => {\r\n  const { chatConfig } = useChat();\r\n  const [avatar, setAvatar] = useState('');\r\n\r\n  useEffect(() => {\r\n    fb.firestore\r\n      .collection('chatUsers')\r\n      .where('userName', '==', username)\r\n      .get()\r\n      .then(snap => {\r\n        const data = snap.docs[0]?.data();\r\n        if (data?.avatar) {\r\n          setAvatar(data.avatar);\r\n        }\r\n      });\r\n  }, [chat, chatConfig, username]);\r\n\r\n  return avatar ? (\r\n    <Image className={className || 'chat-list-avatar'} src={avatar} />\r\n  ) : (\r\n    <div className={className || 'empty-avatar'}>\r\n      {username[0].toUpperCase()}\r\n    </div>\r\n  );\r\n};","import {  Search } from \"semantic-ui-react\";\r\nimport { addPerson, getOtherPeople } from \"react-chat-engine\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useChat } from \"context\";\r\nimport { useDebounce } from \"hooks/useDebounce\";\r\nimport { select } from \"async\";\r\n\r\nexport const SearchUsers = ({ visible, closeFn }) => {\r\n    let searchRef = useRef();\r\n    const [loading, setLoading] = useState();\r\n    const [searchTerm, setSearchTerm] = useState();\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n\r\n    const [searchResults, setSearchResults] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (visible && searchRef) {\r\n            searchRef.focus();\r\n        }\r\n    }, [visible]);\r\n\r\n    const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  const selectUser = username => {\r\n     addPerson(chatConfig, selectedChat.id, username, () => {\r\n          const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\r\n      const updateChat = {\r\n          ...selectedChat,\r\n          people: [...selectedChat.people, { person: { username }}],\r\n      }\r\n\r\n    setSelectedChat(updateChat);\r\n    setMyChats([...filteredChats, updateChat])\r\n    closeFn();\r\n     })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if( debouncedSearchTerm ) {\r\n           setLoading(true);\r\n\r\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\r\n          const userNames = Object.keys(data)\r\n            .map(key => data[key].username)\r\n            .filter(u => u.toLowerCase().includes(debouncedSearchTerm.toLowerCase()));\r\n\r\n            setSearchResults(userNames.map(u => ({ title: u })));\r\n            setLoading(false);\r\n      })\r\n    } else {\r\n        setSearchResults(null);\r\n    }\r\n  }, [chatConfig, selectedChat, debouncedSearchTerm])\r\n\r\n  return (\r\n      <div className='user-search' style={{ display: visible ? 'block' : 'none' }}>\r\n          <Search \r\n             fluid\r\n             onBlur={closeFn}\r\n             loading={loading}\r\n             value={searchTerm}\r\n             results={searchResults}\r\n             placeholder='Search For Users'\r\n             open={!!searchResults && !loading}\r\n             input={{ ref: r => (searchRef = r) }}\r\n             onSearchChange={e => setSearchTerm(e.target.value)}\r\n             onResultSelect={(e, data) => {\r\n                 if(data.result?.title) {\r\n                     selectUser(data.result.title);\r\n                 }\r\n             }}\r\n            />\r\n      </div>\r\n  )\r\n\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport const useDebounce = (value, delay) => {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n    return () => clearTimeout(handler);\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};"," import { ErrorMessage, Field } from \"formik\"\r\n \r\n export const FormField =({ name, label, type = 'text '}) => (\r\n      <label>\r\n         {label}\r\n        <Field type={type} name={name} />\r\n        <ErrorMessage className='error' component='div' name={name} />\r\n     </label>\r\n )","import AvatarEditor from 'react-avatar-editor';\r\nimport {Header, Image, Modal} from 'semantic-ui-react';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { file } from '@babel/types';\r\n\r\n\r\nexport const ImageUpload = ({\r\n    file,\r\n    close, \r\n    onSubmit,\r\n    crop = false,\r\n    header = 'Send This Image?',\r\n}) => {\r\n    const [imageSrc, setImageSrc] = useState('');\r\n    const cropRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const fr = new FileReader();\r\n        fr.onload = () => setImageSrc(fr.result);\r\n        fr.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    return(\r\n        <Modal dimmer='blurring' open={true}>\r\n            <Modal.Header>{header}</Modal.Header>\r\n\r\n            <Modal.Content image>\r\n                {crop ? (\r\n                    <AvatarEditor\r\n                        ref={cropRef}\r\n                        width={200}\r\n                        height={200}\r\n                        border={50}\r\n                        image={imageSrc}\r\n                    />\r\n\r\n                ): (\r\n                    <Image size=\"medium\" src={imageSrc} alt=\"preview\" />\r\n                )}\r\n            </Modal.Content>\r\n\r\n\r\n            <Modal.Actions>\r\n                <div className=\"image-upload-actions\">\r\n                    <button className=\"cancel\" onClick={close}>Cancel</button>\r\n\r\n                    <button \r\n                        className='submit' \r\n                        onClick={() => {\r\n                            if (crop && cropRef) {const canvas = cropRef.current\r\n                               .getImageScaledToCanvas()\r\n                               .toDataURL();\r\n                            fetch(canvas)\r\n                               .then(res => res.blob())\r\n                               .then(blob => onSubmit(blob));\r\n                               } else {\r\n                                   onSubmit();\r\n                               }\r\n                        }}\r\n                    >\r\n                        Upload\r\n                    </button>\r\n                </div>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { useChat } from 'context';\r\nimport { joinUsernames } from 'helpers';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { SearchUsers } from 'components';\r\n\r\nexport const ChatToolbar = () => {\r\n  const { selectedChat, chatConfig } = useChat();\r\n  const [searching, setSearching] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-toolbar\">\r\n        <div className=\"chat-header-text\">\r\n          {joinUsernames(selectedChat.people, chatConfig.userName).slice(\r\n            0,\r\n            100,\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"add-user-icon\">\r\n          <Icon\r\n            color=\"white\"\r\n            name=\"user plus\"\r\n            onClick={() => setSearching(true)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <SearchUsers visible={searching} cloaeFn={() => setSearching(false)} />\r\n\r\n    </>\r\n  );\r\n};","import { useChat } from 'context';\r\nimport { ChatAvatar } from 'components';\r\nimport { groupMessages } from 'helpers';\r\nimport { useScrollToBottom } from 'hooks';\r\n\r\nexport const MessageList = () => {\r\n  const { selectedChat } = useChat();\r\n  useScrollToBottom(selectedChat, 'chat-messages');\r\n\r\n  return (\r\n    <div className=\"chat-messages\">\r\n      {!!selectedChat.messages.length ? (\r\n        groupMessages(selectedChat.messages).map((m, index) => (\r\n          <div key={index} className=\"chat-message\">\r\n            <div className=\"chat-message-header\">\r\n              <ChatAvatar\r\n                className=\"message-avatar\"\r\n                username={m[0].sender.username}\r\n                chat={selectedChat}\r\n              />\r\n              <div className=\"message-author\">{m[0].sender.username}</div>\r\n            </div>\r\n\r\n            <div className=\"message-content\">\r\n              {m.map((individualMessage, index) => (\r\n                <div key={index}>\r\n                  <div className=\"message-text\">{individualMessage.text}</div>\r\n\r\n                  {!!individualMessage.attachments.length && (\r\n                    <img\r\n                      className=\"message-image\"\r\n                      src={individualMessage.attachments[0].file}\r\n                      alt={individualMessage.id + '-attachment'}\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className=\"no-messages-yet\">No messages yet</div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import { useEffect } from \"react\";\r\n\r\nexport const useScrollToBottom = (trigger, className) => {\r\n \r\n  useEffect(() => {\r\n    if (!!trigger) {\r\n      Promise.all(\r\n        Array.from(document.images)\r\n          .filter(img => !img.complete)\r\n          .map(img => new Promise(resolve => {\r\n            img.onload = img.onerror = resolve;\r\n          }))\r\n      )\r\n        .then(() => {\r\n          document.getElementsByClassName(className)[0].scrollTop = document.getElementsByClassName(className)[0].scrollHeight;\r\n        });\r\n    }\r\n  }, [trigger, className]);\r\n};","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from 'components';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}